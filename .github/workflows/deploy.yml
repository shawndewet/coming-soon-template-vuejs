name: Deploy to Production

on:
  push:
    branches:
      - master

env:
    DOCKER_BUILDKIT: 1
    KAMAL_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
    KAMAL_REGISTRY_USERNAME: ${{ github.actor }}
    REPO_NAME: codewell-web

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "image_repository_name=$(echo ${{ env.REPO_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "repository_name=$(echo ${{ env.REPO_NAME }} | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "repository_name_lower=$(echo ${{ env.REPO_NAME }} | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "org_name=$(echo ${{ env.REPO_NAME }} | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;
          if find . -maxdepth 2 -type f -name "Configure.Db.Migrations.cs" | grep -q .; then
            echo "HAS_MIGRATIONS=true" >> $GITHUB_ENV
          else
            echo "HAS_MIGRATIONS=false" >> $GITHUB_ENV
          fi
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.KAMAL_REGISTRY_USERNAME }}
          password: ${{ env.KAMAL_REGISTRY_PASSWORD }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      - name: Install Kamal
        run: gem install kamal -v 2.3.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - name: Kamal bootstrap
        run: kamal server bootstrap

      - name: Check if first run and execute kamal app boot if necessary
        run: |
          FIRST_RUN_FILE=".${{ env.repository_name }}"
          if ! kamal server exec --no-interactive -q "test -f $FIRST_RUN_FILE"; then
            kamal server exec --no-interactive -q "touch $FIRST_RUN_FILE" || true
            kamal deploy -q -P --version ${{ env.TAG_NAME }} || true
          else
            echo "Not first run, skipping kamal app boot"
          fi          

      - name: Ensure file permissions
        run: |
          kamal server exec --no-interactive "sudo mkdir -p /opt/docker/${{ env.repository_name }}/App_Data && sudo mkdir -p /opt/docker/${{ env.repository_name }}/wwwroot  && sudo chown -R 1654:1654 /opt/docker/${{ env.repository_name }}"

      - name: Deploy with Kamal
        run: |
          kamal lock release -v
          kamal deploy --version ${{ env.TAG_NAME }}

